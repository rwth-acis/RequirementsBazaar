<project name="RequirementsBazaar" default="jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	
    <property file="etc/ant_configuration/service.properties"/>
    <property file="etc/ant_configuration/user.properties"/>
	
    <property name="startup" location="etc/startup" />
	
    <property name="service_agent.path" value="${startup}/agent-service-${service.name}.xml" />
    <property name="user_agent.path" value="${startup}/agent-user-${las2peer_user.name}.xml" />
	<property name="passphrases.path" value="${startup}/passphrases.txt" />
	
    <presetdef name="javac">
        <javac includeantruntime="false" />
    </presetdef>
	
    <property name="src.main" location="src/main" />
    <property name="src.junit" location="src/test" />
	
    <property name="tmp" location="tmp" />
    <property name="log" location="log" />
    <property name="service" location="service" />
	
    <property name="tmp.classes" location="${tmp}/classes" />
    <property name="tmp.junit" location="${tmp}/test" />
	
    <property name="export" location="export" />
    <property name="export.doc" location="${export}/doc" />
    <property name="export.jars" location="${export}/jars" />
    <property name="junit.report" location="${export}/test_reports" />

    <property name="lib" location="lib" />

    <path id="libraries">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
            <exclude name="junit-*.jar"/>
        </fileset>
    </path>
	
    <property name="lib.junit" location="${lib}/junit-4.11.jar" />
	
	
    <!-- Ivy Installation (Tool to fetch Libraries) -->
    <property name="ivy.install.version" value="2.3.0" />
    <property name="ivy.jar.dir" value="${basedir}/etc/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml" />
    <property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml" />
    <!-- Download Ivy from Web Site so that it can be used without any special Installation -->
	<target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true"/>
    </target>
    <!-- Try to load Ivy here from local Ivy directory -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <!-- Generate Ivy report -->
    <target name="report" depends="install-ivy">
        <mkdir dir="report" />
        <ivy:resolve type="${ivy.resolve.types}"/>
        <ivy:report todir="report" />
    </target>
    

    <!-- Get Dependencies from our Maven Repository via Ivy -->
    <target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
        <ivy:settings>
            <credentials host="role.dbis.rwth-aachen.de:9911/archiva"  realm="Repository internal"/>
        </ivy:settings>
        <ivy:retrieve type="jar, bundle" />
    </target>
	
	
	<!-- Initialization (Folder Creation)-->
    <target name="init_general">
        <tstamp/>
        <mkdir dir="${tmp}" />
        <mkdir dir="${export}" />
        <mkdir dir="${startup}" />
        <mkdir dir="${log}" />
    </target>
	
    <target name="init_compile" depends="init_general">
        <mkdir dir="${tmp.classes}" />
        <mkdir dir="${tmp.junit}" />
    </target>
	
    <target name="init_jars" depends="init_general">
        <mkdir dir="${export.jars}" />
    </target>
	
    <target name="init_doc" depends="init_general">
        <mkdir dir="${export.doc}" />
    </target>
	
	
    <!-- Compilation -->
    <target name="compile_main" depends="init_compile">
        <javac srcdir="${src.main}"
            destdir="${tmp.classes}"
            classpathref="libraries"
            source="1.7"
            target="1.7"
            debug="on"
            encoding="UTF-8"
            />
        <copy todir="${tmp.classes}">
            <fileset dir="${src.main}">
                <include name="**/*.xml" />
            </fileset>
        </copy>
    </target>
	
    <target name="compile_junit" depends="init_compile">
        <javac srcdir="${src.junit}"
            destdir="${tmp.junit}"
            classpath="${tmp.classes}:${lib.junit}"
            classpathref="libraries"
            source="1.7"
            target="1.7"
            debug="on"
            encoding="UTF-8"
            />
        <copy todir="${tmp.junit}">
            <fileset dir="${src.junit}">
                <include name="**/*.xml" />
            </fileset>
        </copy>
    </target>
	
    <target name="compile_all" depends="compile_main, compile_junit" />
	
	
	<!-- Generate Jars -->
    <target name="jar" depends="compile_main">
        <jar jarfile="${export.jars}/${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}" includes="${service.path}/**" />
            <fileset dir="src" includes="i18n/**" />
            <manifest>
                <attribute name="Library-Version" value="${service.version}" />
                <attribute name="Library-SymbolicName" value="${service.name}" />
            </manifest>
        </jar>
        <!-- Add the same Jar to the Service Directory !-->
        <jar jarfile="${service}/${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}" includes="${service.path}/**" />
            <fileset dir="src" includes="i18n/**" />
            <manifest>
                <attribute name="Library-Version" value="${service.version}" />
                <attribute name="Library-SymbolicName" value="${service.name}" />
            </manifest>
        </jar>
    </target>
	
	
	<!-- Generate Documentation -->
    <target name="java_doc" depends="init_doc">
        <javadoc destdir="${export.doc}"
            author="true"
            version="true"
            use="true"
            source="1.8"
            windowtitle="Service Documentation"
            failonerror="yes"
            encoding="utf8"
            classpath="${tmp.classes}"
            classpathref="libraries"
            >
            <packageset dir="${src.main}" defaultexcludes="yes">
                <include name="de/rwth/dbis/acis/bazaar/**" />
            </packageset>
        </javadoc>
    </target>
	
	
    <!-- JUnit Testing -->
    <target name="junit" depends="junit_tests, junit_clean" />
	
    <target name="init_junit" depends="init_general">
        <mkdir dir="${junit.report}" />
    </target>

    <target name="junit_clean">
        <delete dir="${tmp.junit}" />
    </target>

    <target name="junit_tests" depends="init_junit, compile_all">
        <junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
            <classpath>
                <pathelement path="${tmp.classes}" />
                <pathelement path="${tmp.junit}" />
                <pathelement path="${lib.junit}" />
                <path refid="libraries"/>
            </classpath>
            <formatter type="plain" />
            <batchtest fork="yes" todir="${junit.report}">
                <fileset dir="${tmp.junit}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
	
	
    <!-- XML Agent Generation (Builds Jar first so that Generator is available)-->
	<available file="${service_agent.path}" property="service_agent_exists"/>
	<available file="${user_agent.path}" property="user_agent_exists"/>
	
    <target name="generate_service_agent" depends="jar" unless="service_agent_exists">
        <echo message="Writing Service Agent xml to ${service_agent.path}"/>
        <java classname="i5.las2peer.tools.ServiceAgentGenerator"
            classpathref="libraries"
            failonerror="true"
            fork="true"
            output="${service_agent.path}"
            >
            <arg line="'${service.name}.${service.class}' '${service.password}'"/>
        </java>
    </target>
	
    <target name="generate_user_agent" depends="jar" unless="user_agent_exists">
        <echo message="Writing User Agent xml to ${user_agent.path}"/>
        <java classname="i5.las2peer.tools.UserAgentGenerator"
            classpathref="libraries"
            failonerror="true"
            fork="true"
            output="${user_agent.path}"
            >
            <arg line="'${las2peer_user.password}' '${las2peer_user.name}' '${las2peer_user.email}'"/>
        </java>
    </target>
	
    <target name="generate_configs" depends="generate_service_agent, generate_user_agent">
<echo file="${passphrases.path}" append="false">agent-service-${service.name}.xml;${service.password}
agent-user-${las2peer_user.name}.xml;${las2peer_user.password}
</echo>
    </target>
	
	
    <!-- General Cleanup -->
	<target name="clean_before_build">
        <delete dir="${export}"/>
		<delete file="${service}/${service.name}-${service.version}.jar"/>
	</target>
	
    <target name="clean_after_build">
        <delete dir="${tmp}"/>
		<delete dir=".las2peer"/>
    </target>
	
    <target name="clean_deps">
        <delete dir="${lib}"/>
    </target>
	
    <target name="clean_all" depends="clean_after_build, clean_before_build, clean_deps">
		<delete dir="${log}"/>
    </target>


    <!-- Run -->
	<target name="run" depends="jar">
		<java classname="i5.las2peer.tools.L2pNodeLauncher"
			classpathref="libraries"
			failonerror="true"
			fork="true">
			<jvmarg value="-Xdebug" />
			<jvmarg
				value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432" />
			<arg value='-w'/>
			<arg value='-p'/>
			<arg value='9011'/>
			<arg value='-'/>
			<arg value='uploadStartupDirectory(\"etc/startup\")'/>
			<arg value='startService(\"de.rwth.dbis.acis.bazaar.service.BazaarService\",\"SampleServicePass\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.bazaar.service.UsersResource\",\"SampleServicePass\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.bazaar.service.ProjectsResource\",\"SampleServicePass\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.bazaar.service.ComponentsResource\",\"SampleServicePass\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.bazaar.service.RequirementsResource\",\"SampleServicePass\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.bazaar.service.CommentsResource\",\"SampleServicePass\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.bazaar.service.AttachmentsResource\",\"SampleServicePass\")'/>
            <arg value='startWebConnector'/>
		</java>
	</target>

    <target name="all" depends="clean_before_build, generate_configs, junit, java_doc, clean_after_build" />
	
</project>
