/**
 * This class is generated by jOOQ
 */
package de.rwth.dbis.acis.bazaar.service.dal.jooq.tables;


import de.rwth.dbis.acis.bazaar.service.dal.jooq.Keys;
import de.rwth.dbis.acis.bazaar.service.dal.jooq.Reqbaz;
import de.rwth.dbis.acis.bazaar.service.dal.jooq.tables.records.RequirementsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Requirements extends TableImpl<RequirementsRecord> {

	private static final long serialVersionUID = 1623433787;

	/**
	 * The reference instance of <code>reqbaz.requirements</code>
	 */
	public static final Requirements REQUIREMENTS = new Requirements();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RequirementsRecord> getRecordType() {
		return RequirementsRecord.class;
	}

	/**
	 * The column <code>reqbaz.requirements.Id</code>.
	 */
	public final TableField<RequirementsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>reqbaz.requirements.title</code>.
	 */
	public final TableField<RequirementsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>reqbaz.requirements.description</code>.
	 */
	public final TableField<RequirementsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>reqbaz.requirements.realized</code>.
	 */
	public final TableField<RequirementsRecord, Timestamp> REALIZED = createField("realized", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>reqbaz.requirements.creation_time</code>.
	 */
	public final TableField<RequirementsRecord, Timestamp> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>reqbaz.requirements.lastupdated_time</code>.
	 */
	public final TableField<RequirementsRecord, Timestamp> LASTUPDATED_TIME = createField("lastupdated_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>reqbaz.requirements.Lead_developer_Id</code>.
	 */
	public final TableField<RequirementsRecord, Integer> LEAD_DEVELOPER_ID = createField("Lead_developer_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>reqbaz.requirements.Creator_Id</code>.
	 */
	public final TableField<RequirementsRecord, Integer> CREATOR_ID = createField("Creator_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>reqbaz.requirements.Project_Id</code>.
	 */
	public final TableField<RequirementsRecord, Integer> PROJECT_ID = createField("Project_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>reqbaz.requirements</code> table reference
	 */
	public Requirements() {
		this("requirements", null);
	}

	/**
	 * Create an aliased <code>reqbaz.requirements</code> table reference
	 */
	public Requirements(String alias) {
		this(alias, REQUIREMENTS);
	}

	private Requirements(String alias, Table<RequirementsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Requirements(String alias, Table<RequirementsRecord> aliased, Field<?>[] parameters) {
		super(alias, Reqbaz.REQBAZ, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<RequirementsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_REQUIREMENTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RequirementsRecord> getPrimaryKey() {
		return Keys.KEY_REQUIREMENTS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RequirementsRecord>> getKeys() {
		return Arrays.<UniqueKey<RequirementsRecord>>asList(Keys.KEY_REQUIREMENTS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<RequirementsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<RequirementsRecord, ?>>asList(Keys.LEADDEVELOPER, Keys.CREATOR, Keys.REQUIREMENT_PROJECT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Requirements as(String alias) {
		return new Requirements(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Requirements rename(String name) {
		return new Requirements(name, null);
	}
}
