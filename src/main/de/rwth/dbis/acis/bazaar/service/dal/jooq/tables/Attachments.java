/**
 * This class is generated by jOOQ
 */
package de.rwth.dbis.acis.bazaar.service.dal.jooq.tables;


import de.rwth.dbis.acis.bazaar.service.dal.jooq.Keys;
import de.rwth.dbis.acis.bazaar.service.dal.jooq.Reqbaz;
import de.rwth.dbis.acis.bazaar.service.dal.jooq.tables.records.AttachmentsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attachments extends TableImpl<AttachmentsRecord> {

	private static final long serialVersionUID = 51981582;

	/**
	 * The reference instance of <code>reqbaz.attachments</code>
	 */
	public static final Attachments ATTACHMENTS = new Attachments();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AttachmentsRecord> getRecordType() {
		return AttachmentsRecord.class;
	}

	/**
	 * The column <code>reqbaz.attachments.Id</code>.
	 */
	public final TableField<AttachmentsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>reqbaz.attachments.creation_time</code>.
	 */
	public final TableField<AttachmentsRecord, Timestamp> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>reqbaz.attachments.lastupdated_time</code>.
	 */
	public final TableField<AttachmentsRecord, Timestamp> LASTUPDATED_TIME = createField("lastupdated_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>reqbaz.attachments.Requirement_Id</code>.
	 */
	public final TableField<AttachmentsRecord, Integer> REQUIREMENT_ID = createField("Requirement_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>reqbaz.attachments.User_Id</code>.
	 */
	public final TableField<AttachmentsRecord, Integer> USER_ID = createField("User_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>reqbaz.attachments.title</code>.
	 */
	public final TableField<AttachmentsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>reqbaz.attachments.discriminator</code>.
	 */
	public final TableField<AttachmentsRecord, String> DISCRIMINATOR = createField("discriminator", org.jooq.impl.SQLDataType.CHAR.length(1).nullable(false), this, "");

	/**
	 * The column <code>reqbaz.attachments.file_path</code>.
	 */
	public final TableField<AttachmentsRecord, String> FILE_PATH = createField("file_path", org.jooq.impl.SQLDataType.VARCHAR.length(500), this, "");

	/**
	 * The column <code>reqbaz.attachments.description</code>.
	 */
	public final TableField<AttachmentsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>reqbaz.attachments.story</code>.
	 */
	public final TableField<AttachmentsRecord, String> STORY = createField("story", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>reqbaz.attachments.subject</code>.
	 */
	public final TableField<AttachmentsRecord, String> SUBJECT = createField("subject", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>reqbaz.attachments.object</code>.
	 */
	public final TableField<AttachmentsRecord, String> OBJECT = createField("object", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>reqbaz.attachments.object_desc</code>.
	 */
	public final TableField<AttachmentsRecord, String> OBJECT_DESC = createField("object_desc", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * Create a <code>reqbaz.attachments</code> table reference
	 */
	public Attachments() {
		this("attachments", null);
	}

	/**
	 * Create an aliased <code>reqbaz.attachments</code> table reference
	 */
	public Attachments(String alias) {
		this(alias, ATTACHMENTS);
	}

	private Attachments(String alias, Table<AttachmentsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Attachments(String alias, Table<AttachmentsRecord> aliased, Field<?>[] parameters) {
		super(alias, Reqbaz.REQBAZ, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AttachmentsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ATTACHMENTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AttachmentsRecord> getPrimaryKey() {
		return Keys.KEY_ATTACHMENTS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AttachmentsRecord>> getKeys() {
		return Arrays.<UniqueKey<AttachmentsRecord>>asList(Keys.KEY_ATTACHMENTS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AttachmentsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AttachmentsRecord, ?>>asList(Keys.ATTACHEMENT_REQUIREMENT, Keys.ATTACHEMENT_USER);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Attachments as(String alias) {
		return new Attachments(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Attachments rename(String name) {
		return new Attachments(name, null);
	}
}
